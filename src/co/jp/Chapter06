package co.jp.chapter06;

import java.util.Arrays;

public class JavaHomeWork06 {

	/* VPNを使ったせいか、commitしたら、接続がタイムアウトというエラーになります。申し訳ないが、こういう形で宿題を出しておきます。
	
	 * 質問１．以下関数の修飾⼦、返却型、関数名、引数（引数の型・名称）を回答してください。 public static void main(String[]
	 * args);
	 * 
	 * 修飾⼦ public 返却型 void 関数名 main 引数名：args  引数の型：String[]
	 */
	
	public static void main(String args[]) {
	
	// 質問２．配列の和、MAX値、MIN値を求める処理を関数化してください、main関数に呼び出してください。
		
		System.out.println("質問２");
		int[] arr = new int[]{ 1, 2, 3, 4 };
		System.out.println("配列の和は:" + sum(arr));
		System.out.println("最大值MAX値：" + max(arr));
		System.out.println("最小值MIN値：" + min(arr));
		
// 質問３．以下メソッドの実施結果を教えてください。 
//		 public class Kicker {
//		   private static void sayHello(String y) { 
//		    y = "Hello world"; 
//		   } 
//		   public static void main(String args[]) {
//		       String x = null; 
//		       sayHello(x); 
//		       System.out.println(x);
//		   } 
//		 }
//		  
//		  回答： 実施結果：null
//		 
//		 
//		  質問４︓以下メソッドの実施結果を教えてください。
//		   
//		    public class Kicker { 
//		    	private static void fillArray(String[] array) { 
//		    		array[0] = "value2"; 
//		    	} 
//		    	public static void main(String args[]) {
//		    	  String[] array = new String[]{"value1"}; 
//		    	  fillArray(array); 
//		    	  System.out.println(array[0]); 
//		    	}
//		    }
	
//		  回答： 実施結果：value2
//		  
		
//		 質問５︓以下メソッドの実施結果を教えてください。
//		 
//		  public class Kicker { 
//		    private static void fillArray(String[] array) {
//		     array = new String[]{"1", "2"}; 
//		    }
//		    public static void main(String args[]) { 
//		    	String[] array = null; 
//		    	fillArray(array);
//		     	System.out.println(array == null); 
//		    }
//		   }
//		  
//		 回答：実施結果：true
		
//		 * 質問６-０︓配列は直接に印刷できません。下記メソッドを利⽤して、配列をprintします。以下メソッドを呼び出してください。
//		  public static void printArray(Object[] objs) {
//		    	if(objs == null) { 
//		    		System.out.println("null"); 
//		    		return;
//		    	 }
//		    	String prefix = ""; 
//		    	StringBuilder sb = new StringBuilder();
//		    	sb.append("["); 
//		    	for(Object obj : objs) {
//		    	 	sb.append(prefix); 
//		    		sb.append(String.valueOf(obj)); 
//		    		prefix = ", "; 
//		    	}
//		    	sb.append("]"); 
//		    	System.out.println(sb.toString()); 
//		   }
//		    
//		 
//		 * 質問６-１︓以下静的なメソッドを定義してください。
//		 *  1. メソッド名: megerArray 
//		 *  2. 引数１︓intの配列 left 
//		 *  3. 引数２︓intの配列 right 
//		 *  4. 戻り値︓intの配列 
//		 *  5. 処理内容︓引数left と 引数rightをマージして、新しい配列を作成して返却する。 
//		 
//		 以下メソッドの実施例︓ 
//		  int[] left = new int[] {1, 2, 3, 4}; 
//		  int[] right = new int[] {5, 6, 7, 8}; 
//		  // メソッドを実施後  
//		  int[] result = new int[] {1, 2, 3, 4, 5, 6, 7, 8};
		
		System.out.println("質問6-1");
		
		int[] left = new int[] { 1, 2, 3, 4 };
		int[] right = new int[] { 5, 6, 7, 8 };
		System.out.println("Meger Array:" + Arrays.toString(megerArray(left, right)));
		
			
//      質問６-２︓以下静的なメソッドを定義してください。
//	    1. メソッド名: subArray 
//	    2. 引数１︓intの配列 array 
//	    3. 引数２︓開始のstartIndex 
//	    4. 引数３︓⻑さlength 
//	    5. 戻り値︓intの配列 
//	    6. 処理内容︓startIndexからstartIndex + lengthまでサブ配列を取得する

		System.out.println("質問6-2");
		int[] array_1 = new int[] {1,2,3,4,5};
		int startIndex = 1;
		int length = 3;
		System.out.println("Sub Array:" + Arrays.toString(subArray(array_1, startIndex, length)));
		
//	    質問７︓以下静的なメソッドを定義してください。 
//	    1. メソッド名︓trim 
//	    2. 引数１︓charの配列 
//	    3. 戻り値︓charの配列 
//	    4. 処理内容︓引数１のcharの配列先頭と末尾の空⽩⽂字列を削除してください。
	    
		
				//以下メソッドの実施例︓
				//1 char[] input = new char[] {' ', ' ', 'A', 'b', ' ', ' ', 'C', ' '}; // 入力引数
				//2  メソッドを実施後
				//3 char[] output = new char[] {'A', 'b', ' ', ' ', 'C'}; // 入力引数
		System.out.println("質問7");
		char[] input = new char[] {' ', ' ', 'A', 'b', ' ', ' ', 'C', ' '};
		 
       		 char[] output =trim(input);
 
        	System.out.println("input: " + Arrays.toString(input));
        	System.out.println("output: " + Arrays.toString(output));
		
		
		//質問８︓バブルソート⽤メソッドを作成してください。
		
				//1. メソッド名︓bubbleSort
				//2. 引数１︓intの配列
				//3. 戻り値︓ソート済みの配列
				//4. 処理内容︓bubbleSortアルゴリズムを⽤い、⼊⼒した引数の配列をソートしてください。
		
       		 System.out.println("質問8");
		 int[] array8 = {4,6,2,8,2,5};
		 System.out.println("bubbleSort Array:" + Arrays.toString(bubbleSort(array8)));
		
		//質問９︓メソッドの呼び出す練習。
				//1. 質問６-１を⽤い、２つ配列をマージします。
				//2. 質問８を⽤い、ステップ１のマージした配列をソートする。
				//3. 注意︓コードを１⾏にしてください。
		
		 
	}	
	
	//質問2
	
	public static int sum(int[] datas) {
		int a = 0;
		for (int i = 0; i < datas.length; i++) {
			a += datas[i];
		}
		return a;
    }


	public static int max(int[] datas) {
		int maxvalue = datas[0];
		for (int i = 0; i < datas.length; i++) {
			if (datas[i] > maxvalue) {
				maxvalue = datas[i];
			}
		}
		return maxvalue;
	}

	public static int min(int[] datas) {
		int minvalue = datas[0];
		for (int i = 0; i < datas.length; i++) {
			if (datas[i] < minvalue) {
				minvalue = datas[i];
			}
		}
		return minvalue;
	}

	 //質問６—1
	
	public static int[] megerArray(int[] left, int[] right) {
		int[] array_meger = new int[left.length + right.length];
		for (int i = 0; i < array_meger.length; i++) {
			if (i < left.length) {
				array_meger[i] = left[i];
			} else {
				array_meger[i] = right[i - left.length];
			}
		}
		return array_meger;
	}

  //質問6−2
	public static int[] subArray(int[] array, int startIndex, int length) {
		int[] array_sub = new int[length];
		
		for(int i = 0; i < length; i++) {
			array_sub[i] = array[startIndex + i];
		}
		return array_sub;		
		
	}
 //質問7
	public static char[] trim(char[] input) {
		int i = 0, j = input.length - 1;
		char[] output = null;
		while (input[i] == ' ') {
			i++;
		}

		while (input[j] == ' ') {
			j--;

		}
		output = subArray(input, i, j - i + 1);

		return output;
	}

	public static char[] subArray(char[] array, int startIndex, int length) {
		int k = 0, i = startIndex;
		char[] sub = new char[length];
		while (k < length) {
			sub[k++] = array[i++];
		}
		return sub;
	}
	
	
  //質問8
  	public static int[] bubbleSort(int[] array) {
		for (int i = 0; i < array.length - 1; i++) {
			for (int j = 0; j < array.length - 1 - i; j++) {
				if (array[j] > array[j + 1]) {
					int temp = array[j];
					array[j] = array[j + 1];
					array[j + 1] = temp;
				}

			}
		}
		return array;
	}
}
