package co.jp.chapter09;

public class JavaHomeWork09 {

	/* 
	
	 //	質問1：以下ソースにラムダ式の使う場所を解釈してください。
	// 1 import java.awt.event.ActionEvent;
	// 2 import java.awt.event.ActionListener;
	// 3 import javax.swing.JButton;
	// 4 import javax.swing.JFrame;
	// 5
	// 6 public class GUIsample {
	// 7
	// 8   public static void main(String[] args) {	
	// 9   JFrame window = new JFrame("DCNet Java 教育");
	// 10  window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	// 11  window.setSize(800, 600);
	// 12  JButton btn = new JButton("hello world");
	// 13  window.getContentPane().add(btn);
	// 14				
	// 15  btn.addActionListener((ActionEvent e) -> {
	// 16    System.out.println("ボタンクリックしました。");
	// 17  });
	// 18    window.setVisible(true);	
	// 19  }
	// 20 }
	// 回答：15行
	
	
	
	// 質問2：以下ソースに匿名クラスの利用する行は?
	// 1 public class Kicker {
	// 2
	// 3   public static void main(String[] args) {
	// 4      new Thread() {
	// 5          @Override
	// 6          public void run() {
	// 7             System.out.println("thread running...");
	// 8          }
	// 9      }.start();
	// 10  }
	// 11 }
	// 回答：匿名クラスの利用する行は 4~9 です。
	
	

	質問１︓クラス（Class）とは︖クラス定義⽤のキーワードは「 class 」である。 
	
	java类就是具备某些共同特征的实体的集合。
	
	 *  質問２︓クラスメンバ（Class member）の何種類ありますか。
	 *   1. 属性・フィールド (Field) 2. 関数(Function)・メソッド(Method)・操作(Operator) 
	 *   質問３︓クラスメンバの関数は特殊の関数「コンストラクタ」が持っています。 
	 *   質問４︓コンストラクタの特徴 1. 戻り値不要 2. 関数名＝クラス名称 
	 *   質問５︓コンストラクタの作⽤︓クラス属性の初期化する。
	 *   質問６︓１つクラスに複数のコンストラクタ持つ可能
	 *   質問７︓キーワード this の使⽤⽅法︓ this.name ︖ name ? 
	 *   public class People {
 			private String name;
 			public void setName(String name) {
 			this.name = name;
 			} 
 		}
	 *   質問８︓クラスを利⽤する為、インスタンス化する必要です。インスタンスの演算⼦は new です。 
	 *   質問９︓演算⼦ new の直後呼び出しているメソッドは「コンストラクタ」︔ 
	 *   People obj = new People();
	 *   質問１０︓アクセス制御の３種類あります。 1. + public 2. # protected 3. - private 
	 *   質問１１︓静的のメンバの定義するキーワード（修飾⼦）は static 。 
	 * 質問１２︓静的のメンバアクセス時、インスタンス化不要。アクセス⽅法は「クラス名. 静的のメンバ」。
	 * 	System.out.println("1234"); // 静的のField
		String value = String.format("%05d", 0); // 静的のメソッド
		
		
		
		
		質問１３︓クラス「Animal」を定義して、インスタンス化しオブジェクト cat を作成しま す。
		変数catのsayHello()メソッドを呼び出してください。 
		1. 属性︓年齢 2. 属性︓名前 3. 属性︓分類 4. コンストラクタ︓名前を渡して、初期化する 
		5. 操作︓sayHello()︓void 6. 操作︓getName(): String ⾃分の名称を返す.
		
	//Animal class	
		public class Animal {
			private int age;
			private String name;
			private String type;
	
	
			public Animal(String name) {
				this.name = name;
			}

	
			public String getName() {
			return name;
			}

	
			public void setName(String name) {
			this.name = name;
			}
	
	
			public void sayHello() {
			System.out.println("Hello");
			}
	
		}
	// Cat class
		public class Cat extends Animal {

			public Cat(String name) {
			super(name);
			
			}

			@Override
			public void sayHello() {
		
			System.out.println("ニャー");
			}
		}
		
   	//Test Class
	
	public class Test {
	
		public static void main(String[] args) {
			Cat cat = new Cat("kity");
			

		System.out.println("猫の名前は：" + cat.getName());
		cat.sayHello();
		
		}
	}

	     
		質問１４︓以下１⾏を解釈してください。
		System.out.println(new Animal("cat").getName());
		 
		 catという名前のインスタンスを生成し、さらにgetNameメソッドを利用して、nameをprintする
		
		質問１５︓クラス継承する⽤キーワードは「 extends 」
		質問１６︓継承しているクラス。上位クラスは「親クラス」・「スーパークラス」。下位 クラスは「サブクラス」と呼びます。 
		質問１７︓サブクラス＆アクセス制御（ public, protected ）。
		 質問１８︓サブクラスと親クラス同じメソッド名かつメソッドの引数は⼀致する場合、 「オーバーライド」となります。
		 
		 質問１９︓以下Animalクラスを継承して以下２クラスを作成してください。
		 1. クラス Cat。sayHelloメソッドをオーバーライドして、System.out.println(“ニャー“);
		 
		public class Cat extends Animal{
   		 @Override
			void speck() {
			System.out.println("ニャー");
			}
		}
		
		 2. クラス Dog。sayHelloメソッドをオーバーライドして、System.out.println(“ワン“);
		public class Dog extends Animal() {
    			@Override
			void speck() {
				System.out.println("ニャー");
			}
		}
		
		質問２０︓以下コードをIS-A関係で説明してください。
		Animal v0 = new Animal(); // v0 は Animal 型
		Animal v1 = new Cat("a cat"); // v1 は Cat 型, v1 は Animal 型
		Animal v2 = new Dog("a dog"); // v2 は Dog 型, v2 は Animal 型
		Cat v3 = new Cat(""); // OK
		Dog v4 = new Dog(""); // OK
		Cat v5 = new Animal(""); // NG
		
		v1はCat型、v2はDog型である。
		Cat is a Animal 、Dog is  a Animal
	
		
		
		
	 * */
	 
}
